// <auto-generated />
using System;
using CourseCompass.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseCompassServer.Migrations
{
    [DbContext(typeof(CompassDbContext))]
    [Migration("20240309172116_reupdateMigration")]
    partial class reupdateMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("CourseCompass.Models.Domain.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Attempt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cgpa")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAttempted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWinterSemester")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LecturePlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LectureTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfessorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Insight", b =>
                {
                    b.Property<Guid>("InsightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentInsight")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("InsightId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentUserId")
                        .IsUnique();

                    b.ToTable("Insights");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Student", b =>
                {
                    b.Property<Guid>("StudentUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InsightId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StudentUserId");

                    b.HasIndex("CourseId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Insight", b =>
                {
                    b.HasOne("CourseCompass.Models.Domain.Course", "Course")
                        .WithMany("Insights")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CourseCompass.Models.Domain.Student", "Student")
                        .WithOne("Insight")
                        .HasForeignKey("CourseCompass.Models.Domain.Insight", "StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Student", b =>
                {
                    b.HasOne("CourseCompass.Models.Domain.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Course", b =>
                {
                    b.Navigation("Insights");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseCompass.Models.Domain.Student", b =>
                {
                    b.Navigation("Insight")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
